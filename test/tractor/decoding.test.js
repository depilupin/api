const ConvertUpV0OrderDto = require('../../src/repository/dto/tractor/ConvertUpV0OrderDto');
const SowV0OrderDto = require('../../src/repository/dto/tractor/SowV0OrderDto');
const TractorConvertUpV0Service = require('../../src/service/tractor/blueprints/convert-up-v0');
const TractorSowV0Service = require('../../src/service/tractor/blueprints/sow-v0');

const SOW_V0_BLUEPRINT =
  '0x36bfafbd0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000003a4b452c7ae0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000bb0a41927895F8ca2b4ECCc659ba158735fCF28B000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000002443ca8e1b20000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000001dcd6500000000000000000000000000000000000000000000000000000000000ee6b280000000000000000000000000000000000000000000000000000000002faf080000000000000000000000000000000000000000000000000000000000004c4b4000000000000000000000000000000000000000000000000000003bc8b295a6d000000000000000000000000000000000000000000000021e19e0c9bab2400000000000000000000000000000000000000000000000000000000000000000012c0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000ff0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
const CONVERT_UP_V0_BLUEPRINT =
  '0x36bfafbd000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000004a00000000000000000000000000000000000000000000000000000000000000424b452c7ae00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000006b6fbecda0b4751198770eaa114687e2a141a2b80000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000002c4d4db3ec600000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000393870000000000000000000000000000000000000000000000000000000000002dc6c00000000000000000000000000000000000000000000000000000000003920060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f3e58000000000000000000000000000000000000000000000000000000000007a1200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000';

describe('Tractor Blueprint Decoding', () => {
  describe('Sow V0', () => {
    test('Ignores other requisitions', async () => {
      const dtoSpy = jest.spyOn(SowV0OrderDto, 'fromBlueprintCalldata');

      const result = await TractorSowV0Service.tryAddRequisition({ blueprintHash: 123 }, CONVERT_UP_V0_BLUEPRINT);

      expect(result).not.toBeDefined();
      expect(dtoSpy).not.toHaveBeenCalled();
    });

    test('Successfully decodes matching event', () => {
      const requisitionBlueprintData = SOW_V0_BLUEPRINT;
      const decoded = TractorSowV0Service.decodeBlueprintData(requisitionBlueprintData);
      expect(decoded).toBeDefined();
      expect(decoded).not.toBeNull();
    });
  });

  describe('Convert V0', () => {
    test('Ignores other requisitions', async () => {
      const dtoSpy = jest.spyOn(ConvertUpV0OrderDto, 'fromBlueprintCalldata');

      const result = await TractorConvertUpV0Service.tryAddRequisition({ blueprintHash: 123 }, SOW_V0_BLUEPRINT);

      expect(result).not.toBeDefined();
      expect(dtoSpy).not.toHaveBeenCalled();
    });

    test('Successfully decodes matching event', () => {
      const requisitionBlueprintData = CONVERT_UP_V0_BLUEPRINT;
      const decoded = TractorConvertUpV0Service.decodeBlueprintData(requisitionBlueprintData);
      expect(decoded).toBeDefined();
      expect(decoded).not.toBeNull();
    });
  });
});
