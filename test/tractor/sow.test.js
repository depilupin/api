const SowV0OrderDto = require('../../src/repository/dto/tractor/SowV0OrderDto');
const TractorSowV0Service = require('../../src/service/tractor-blueprints/sow-v0');

describe('TractorSowV0Service', () => {
  beforeEach(() => {
    jest.restoreAllMocks();
  });

  test('Creates additional order data for matching requisition', async () => {
    jest
      .spyOn(TractorSowV0Service, 'decodeBlueprintData')
      .mockReturnValue({ args: { params: { opParams: { operatorTipAmount: 456n } } } });
    jest.spyOn(SowV0OrderDto, 'fromBlueprintCalldata').mockReturnValue('dto');
    const upsertSpy = jest.spyOn(TractorSowV0Service, 'updateSowV0Orders').mockImplementation(() => {});

    const result = await TractorSowV0Service.tryAddRequisition({ blueprintHash: 123 }, 'data');

    expect(result).toBe(456n);
    expect(upsertSpy).toHaveBeenCalledWith(['dto']);
  });

  test('Ignores other requisitions', async () => {
    const dtoSpy = jest.spyOn(SowV0OrderDto, 'fromBlueprintCalldata');

    const result = await TractorSowV0Service.tryAddRequisition({ blueprintHash: 123 }, 'data');

    expect(result).not.toBeDefined();
    expect(dtoSpy).not.toHaveBeenCalled();
  });

  test('Successfully decodes matching event', () => {
    const requisitionBlueprintData =
      '0x36bfafbd0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000003a4b452c7ae0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000e58cbe144dd5556c84874dec1b3f2d0d6ac45f1b000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000002443ca8e1b20000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000002001041c0000000000000000000000000000000000000000000000000000000000337f9800000000000000000000000000000000000000000000000000000000037ca3a00000000000000000000000000000000000000000000000000000000001d9f9e4000000000000000000000000000000000000000000000000000003b7feea6203000000000000000000000000000000000000000000000021e19e0c9bab2400000000000000000000000000000000000000000000000000000000000000000012c0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000ff0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
    expect(TractorSowV0Service.decodeBlueprintData(requisitionBlueprintData)).toBeDefined();
  });
});
