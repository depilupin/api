const { C } = require('../../src/constants/runtime-constants');
const Interfaces = require('../../src/datasources/contracts/interfaces');

describe('Sow Blueprint V0', () => {
  test('Decodes event', () => {
    const requisitionBlueprintData =
      '0x36bfafbd0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000003a4b452c7ae00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000dee24c99e8df7f0e058f4f48f228cc07db704fc000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000002443ca8e1b20000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000127e0a100000000000000000000000000000000000000000000000000000000000496ed400000000000000000000000000000000000000000000000000000000022de6440000000000000000000000000000000000000000000000000000000002abc8d40000000000000000000000000000000000000000000000000000025c712ac47800000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000000000000000000000000000000000000000000000012c0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000ff0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';

    const iBeanstalk = Interfaces.getBeanstalk();
    const iSiloHelpers = Interfaces.get(C().SILO_HELPERS);

    const advFarm = Interfaces.safeParseTxn(iBeanstalk, requisitionBlueprintData);
    if (!advFarm || advFarm.name !== 'advancedFarm') {
      return;
    }

    for (const advFarmData of advFarm.args.data) {
      const advFarmCall = Interfaces.safeParseTxn(iBeanstalk, advFarmData.callData);
      if (advFarmCall.name !== 'advancedPipe') {
        return;
      }

      for (const pipeCall of advFarmCall.args.pipes) {
        if (pipeCall.target.toLowerCase() !== C().SILO_HELPERS) {
          return;
        }
        // TODO: not working, revisit once updated requisiton bytes are provided.
        const sowV0Call = Interfaces.safeParseTxn(iSiloHelpers, pipeCall.callData);
        let i = 0;
      }
    }
  });
});
